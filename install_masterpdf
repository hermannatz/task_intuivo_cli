#!/bin/bash
#
# @author Zeus Intuivo <zeus@intuivo.com>
#
#
# SUDO_USER only exists during execution of sudo
# REF: https://stackoverflow.com/questions/7358611/get-users-home-directory-when-they-run-a-script-as-root
# Global:
THISSCRIPTNAME=`basename "$0"`

execute_as_sudo(){
  if [ -z $SUDO_USER ] ; then
    if [ -e "./$THISSCRIPTNAME" ] ; then
    {       
      sudo "./$THISSCRIPTNAME"
    }
    elif ( command -v type "$THISSCRIPTNAME" >/dev/null 2>&1 );  then
    {
      echo "sudo sudo sudo "
      sudo "$THISSCRIPTNAME"
    }
    else
    {
      echo -e "\033[05;7m*** Failed to find script to recall it as sudo ...\033[0m"
      exit 1
    }
    fi
    wait
    exit 0
  fi
  # REF: http://superuser.com/questions/93385/run-part-of-a-bash-script-as-a-different-user
  # REF: http://superuser.com/questions/195781/sudo-is-there-a-command-to-check-if-i-have-sudo-and-or-how-much-time-is-left
  local CAN_I_RUN_SUDO=$(sudo -n uptime 2>&1|grep "load"|wc -l)
  if [ ${CAN_I_RUN_SUDO} -gt 0 ]; then
    echo -e "\033[01;7m*** Installing as sudo...\033[0m"
  else
    echo "Needs to run as sudo ... ${0}"
  fi
}
execute_as_sudo

USER_HOME=$(getent passwd $SUDO_USER | cut -d: -f6)

load_struct_testing_wget(){
    local provider="$USER_HOME/_/clis/execute_command_intuivo_cli/struct_testing"
    [   -e "${provider}"  ] && source "${provider}"
    [ ! -e "${provider}"  ] && eval """$(wget --quiet --no-check-certificate  https://raw.githubusercontent.com/zeusintuivo/execute_command_intuivo_cli/master/struct_testing -O -  2>/dev/null )"""   # suppress only wget download messages, but keep wget output for variable
    ( ( ! command -v type passed >/dev/null 2>&1; ) && echo -e "\n \n  ERROR! Loading struct_testing \n \n " && exit 69; )
} # end load_struct_testing_wget
load_struct_testing_wget
passed Caller user identified:$USER_HOME



# https://code.visualstudio.com/docs/?dv=linux64_rpm
get_lastest_studio_code_version() {
    local CODEFILE=$(curl -sSLo -  https://code.visualstudio.com/docs/?dv=linux32_deb&build=insiders  2>&1;) # suppress only wget download messages, but keep wget output for variable
    echo "${CODEFILE}" | grep 'facebook'  | head -3
    local CODELASTESTBUILD=$(echo "${CODELASTESTBUILD}" | grep 'direct download link ....' )
    wait
	    [[ -z "${CODELASTESTBUILD}" ]] && failed "Master PDF Editor Version not found! :${CODELASTESTBUILD}:"
    echo "${CODELASTESTBUILD}"
    if [ -z "${CODELASTESTBUILD}" ] ; then  # if empty
    {
      failed Could not find Code version
    }
    fi

} # end get_lastest_studio_code_version

_download() {
  #  url  https://code-industry.net/public/master-pdf-editor-3133_amd64.deb
  _trap_try_start
  local target_url="${1}"
  if [ -z "${target_url}" ] ; then  # if empty
  {
    failed Could not load target_url string or it was empty
  }
  fi
  _trap_catch_check
  # wget --directory-prefix="${USER_HOME}/Downloads/" --quiet --no-check-certificate "${target_url}" 2>/dev/null
  echo -e "\033[01;7m*** Downloading file to temp location...\033[0m"
  if ( command -v type wget >/dev/null 2>&1; ) ; then
    # # REF: about :> http://unix.stackexchange.com/questions/37507/what-does-do-here
    _trap_try_start
    :> wgetrc   # here :> equals to Equivalent to the following: cat /dev/null > wgetrc which Nulls out the file called "wgetrc" in the current directory. As in creates an empty file "wgetrc" if one doesn't exist or overwrites one with nothing if it does.
    _trap_catch_check
    file_exists_with_spaces wgetrc
    _trap_try_start
    echo "noclobber=off" >> wgetrc
    _trap_catch_check
    echo "dir_prefix=." >> wgetrc
    echo "dirstruct=off" >> wgetrc
    echo "verbose=off" >> wgetrc    # NOTE Can't be verbose and quiet at the same time.--quiet
    echo "progress=bar:default" >> wgetrc
    echo "tries=3" >> wgetrc
    # _trap_try_start # _trap_catch_check
    # WGETRC=wgetrc wget --directory-prefix="${USER_HOME}/Downloads/" --quiet --no-check-certificate "${target_url}" 2>/dev/null
    #  _trap_catch_check
    # WGETRC=wgetrc wget --quiet --no-check-certificate "${target_url}" 2>/dev/null   # suppress only wget download messages, but keep wget output for variable
    _try "WGETRC=wgetrc wget --directory-prefix=\"${USER_HOME}/Downloads/\" --quiet --no-check-certificate \"${target_url}\"" # 2>/dev/null"
    echo -e "\033[7m*** Download Wget executed completed.\033[0m"
    rm -f wgetrc
    file_does_not_exist_with_spaces wgetrc
  elif ( command -v type curl >/dev/null 2>&1; ); then
    curl -O "${target_url}" 2>/dev/null   # suppress only wget download messages, but keep wget output for variable
    _assure_success
  else
    failed "I cannot find wget or curl programs to perform a download action! ${target_url}"
  fi
}

_darwin__64() { 
    local CODENAME="MasterPDFEditor.dmg"
    local URL="https://code-industry.net/public/"
    cd $USER_HOME/Downloads/
    _download "${URL}"
    sudo hdiutil attach ${CODENAME}
    sudo cp -R /Volumes/Master\ PDF\ Editor/Master\ PDF\ Editor.app /Applications/
    sudo hdiutil detach /Volumes/Master\ PDF\ Editor
} # end _darwin__64

_ubuntu__64() {
    local CODENAME="master-pdf-editor-${CODELASTESTBUILD}-qt5.amd64.deb"
    local URL="https://code-industry.net/public/"
    cd $USER_HOME/Downloads/
    _download "${URL}"
    sudo dpkg -i ${CODENAME}
} # end _ubuntu__64

_ubuntu__32() {
    local CODENAME="master-pdf-editor-${CODELASTESTBUILD}.i386.deb"
    local URL="https://code-industry.net/public/"
    cd $USER_HOME/Downloads/
    _download "${URL}"
    sudo dpkg -i ${CODENAME}
} # end _ubuntu__32 

_fedora__64() {
   # https://code-industry.net/public/master-pdf-editor-5.4.38-qt5.x86_64.rpm
  # get download link 
  # https://code.visualstudio.com/docs/?dv=linux64_rpm
    local CODEFILE=$(curl -sSLo -  https://code-industry.net/get-masterpdfeditor/  2>&1;) # suppress only wget download messages, but keep wget output for variable
    local CODELASTESTBUILD=$(echo $CODEFILE | sed s/\</\\n\</g | grep "now available for Linux" | sed s/\>/\>\\n/g | sed s/\ /\\n/g | head -3 | tail -1)
    local ARCHITECTURE=$(uname -m)
    wait
    [[ -z "${CODELASTESTBUILD}" ]] && failed "Master PDF Version not found! :${CODELASTESTBUILD}:"
    echo "${CODELASTESTBUILD}"
    if [ -z "${CODELASTESTBUILD}" ] ; then  # if empty
    {
      failed Could not find Code version
    }
    fi


  # get download link 
  local ID
  local VERSION
  local VERSION_ID
  file_exists_with_spaces "/etc/os-release"
  _assure_success
  
  source /etc/os-release
  # $ echo $ID
  # fedora
  # $ echo $VERSION_ID
  # 17
  # $ echo $VERSION
  # 17 (Beefy Miracle)
  assert not empty "${ID}"
  assert not empty "${VERSION_ID}"
  assert not empty "${USER_HOME}"
  assert not empty "${CODELASTESTBUILD}"
  assert not empty "${ARCHITECTURE}"
  local CODENAME="master-pdf-editor-${CODELASTESTBUILD}-qt5.${ARCHITECTURE}.rpm"
  #  local CODENAME="master-pdf-editor-5.4.38-qt5.x86_64.rpm"
  #  local CODENAME="rpmfusion-free-release-${VERSION_ID}.noarch.rpm"
  #  local TARGET_URL="https://download1.rpmfusion.org/free/${ID}/${CODENAME}"
  local TARGET_URL="https://code-industry.net/public/${CODENAME}"
  file_exists_with_spaces $USER_HOME/Downloads
  cd $USER_HOME/Downloads
  _download "${TARGET_URL}"
  # when error Can't be verbose and quiet at the same time.
  #            Usage: wget [OPTION]... [URL]...
  # then correct wget options 
  file_exists_with_spaces "$USER_HOME/Downloads/${CODENAME}"
  ensure rpm or "Canceling Install. Could not find rpm command to execute install"
  _trap_try_start # _trap_catch_check
  local msg=$(rpm -ivh "$USER_HOME/Downloads/${CODENAME}")
  _trap_catch_check
  echo "${msg}"
  # when error error: Failed dependencies:
  #	     libQt5Svg.so.5()(64bit) is needed by master-pdf-editor-5.4.38-1.x86_64
  # then correct with 
  # fix with 
  # then fix with
  # sudo dnf -y install qt5-devel qt-creator qt5-qtbase qt5-qtbase-devel
  # rpm again
}

_mingw__64() {
    local CODENAME="MasterPDFEditor-setup.exe"
    cd $HOMEDIR
	    cd Downloads
    curl -O https://code-industry.net/public/${CODENAME}
    ${CODENAME}
} # end _mingw__64

_mingw__32() {
    local CODENAME="MasterPDFEditor-setup.exe"
    cd $HOMEDIR
    cd Downloads
	    curl -O https://code-industry.net/public/${CODENAME}
	    ${CODENAME}
} # end 

_main() {
  determine_os_and_fire_action
} # end _main

_main

echo ":)"


