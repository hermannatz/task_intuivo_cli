#!/usr/bin/env bash

# Script to install all clis once downloaded

# SUDO_USER only exists during execution of sudo
# REF: https://stackoverflow.com/questions/7358611/get-users-home-directory-when-they-run-a-script-as-root
# Global:
THISSCRIPTNAME=`basename "$0"`

execute_as_sudo(){
  if [ -z $SUDO_USER ] ; then
    if [[ -z "$THISSCRIPTNAME" ]] ; then
    {
        echo "error You need to add THISSCRIPTNAME variable like this:"
        echo "     THISSCRIPTNAME=\`basename \"\$0\"\`"
    }
    else
    {
        if [ -e "./$THISSCRIPTNAME" ] ; then
        {
          sudo "./$THISSCRIPTNAME"
        }
        elif ( command -v type "$THISSCRIPTNAME" >/dev/null 2>&1 );  then
        {
          echo "sudo sudo sudo "
          sudo "$THISSCRIPTNAME"
        }
        else
        {
          echo -e "\033[05;7m*** Failed to find script to recall it as sudo ...\033[0m"
          exit 1
        }
        fi
    }
    fi
    wait
    exit 0
  fi
  # REF: http://superuser.com/questions/93385/run-part-of-a-bash-script-as-a-different-user
  # REF: http://superuser.com/questions/195781/sudo-is-there-a-command-to-check-if-i-have-sudo-and-or-how-much-time-is-left
  local CAN_I_RUN_SUDO=$(sudo -n uptime 2>&1|grep "load"|wc -l)
  if [ ${CAN_I_RUN_SUDO} -gt 0 ]; then
    echo -e "\033[01;7m*** Installing as sudo...\033[0m"
  else
    echo "Needs to run as sudo ... ${0}"
  fi
}
execute_as_sudo

USER_HOME=$(getent passwd $SUDO_USER | cut -d: -f6)

load_struct_testing_wget(){
    local provider="$USER_HOME/_/clis/execute_command_intuivo_cli/struct_testing"
    [   -e "${provider}"  ] && source "${provider}"
    [ ! -e "${provider}"  ] && eval """$(wget --quiet --no-check-certificate  https://raw.githubusercontent.com/zeusintuivo/execute_command_intuivo_cli/master/struct_testing -O -  2>/dev/null )"""   # suppress only wget download messages, but keep wget output for variable
    ( ( ! command -v type passed >/dev/null 2>&1; ) && echo -e "\n \n  ERROR! Loading struct_testing \n \n " && exit 69; )
} # end load_struct_testing_wget
load_struct_testing_wget

passed Caller user identified:$SUDO_USER
passed Home identified:$USER_HOME
file_exists_with_spaces "$USER_HOME"

COMANDDER=""
_checka_node_commander() {
    local COMANDDER="$1"
    if is_not_installed npm  ; then
    {
        Installing Node.js
        sudo $COMANDDER install -y nodejs
    }
    fi
    verify_is_installed npm
    verify_is_installed node
}
_checka_tools_commander(){
    local COMANDDER="$1"
    is_not_installed xclip && sudo $COMANDDER  install xclip -y
    is_not_installed tree && sudo $COMANDDER  install tree -y
    is_not_installed ag && sudo $COMANDDER -y install the_silver_searcher
    is_not_installed ack && sudo $COMANDDER -y install ack
    verify_is_installed xclip
    verify_is_installed tree
    verify_is_installed ag
    verify_is_installed ack
}

_ubuntu__64() {
    # debian sudo usermod -aG sudo $SUDO_USER
    # chown $SUDO_USER:$SUDO_USER -R /home
    # sudo groupadd docker
    # sudo usermod -aG docker $SUDO_USER

    COMANDDER="apt-get"
    _checka_node_commander $COMANDDER
    if  it_does_not_exist_with_spaces /etc/apt/sources.list.d/cloudfoundry-cli.list ; then
    {
        Installing cloudfoundry cf 7
        wget -q -O - https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | sudo apt-key add -
        echo "deb https://packages.cloudfoundry.org/debian stable main" | sudo tee /etc/apt/sources.list.d/cloudfoundry-cli.list
        echo  ...then, update your local package index, then finally install the cf CLI
        sudo $COMANDDER update -y
        sudo $COMANDDER install -y cf-cli
        yes | sudo snap install cf-cli -y
    }
    fi
    verify_is_installed cf
    _checka_tools_commander $COMANDDER
}

_fedora__64() {
    COMANDDER="dnf"
    _checka_node_commander $COMANDDER
    if  it_does_not_exist_with_spaces /etc/yum.repos.d/cloudfoundry-cli.repo ; then
    {
        Installing cloudfoundry cf 7
        sudo wget -O /etc/yum.repos.d/cloudfoundry-cli.repo https://packages.cloudfoundry.org/fedora/cloudfoundry-cli.repo
        # sudo $COMANDDER install -y cf6-cli
        yes | sudo $COMANDDER install -y cf7-cli
    }
    fi
    verify_is_installed cf
    _checka_tools_commander $COMANDDER
}

_darwin__64() {
    COMANDDER="brew"
    echo mac?
    brew install nodejs
    # version 6 brew install cloudfoundry/tap/cf-cli
    brew install cloudfoundry/tap/cf-cli@7
}

determine_os_and_fire_action

ensure npm or "Canceling Install. Could not find npm"
ensure node or "Canceling Install. Could not find node"
ensure cf or "Canceling Install. Could not find cf"
MTASCHECK=$(cf mtas --help)
if [[ -n "$MTASCHECK" ]] &&  [[ "$MTASCHECK" == *"FAILED"* ]]  ; then
{
    yes | cf install-plugin multiapps
}
fi

if [[ -n "$MTASCHECK" ]] &&  [[ "$MTASCHECK" != *"FAILED"* ]]  ; then
{
    passed Installed cf mtas plugin
}
fi

ensure git or "Canceling Install. Could not find git"
CURRENTGITUSER=$(git config --global --get user.name)
CURRENTGITEMAIL=$(git config --global --get user.email)

if [[ -z "$CURRENTGITEMAIL" ]] ; then
{
    Configuring git user.email with  $SUDO_USER@$(hostname)
    git config --global user.email $SUDO_USER@$(hostname)
}
fi
if [[ -z "$CURRENTGITUSER" ]] ; then
{
    Configuring git user.name with  $SUDO_USER
    git config --global user.name $SUDO_USER
}
fi

_install_npm_utils() {

    # Global node utils
    if  is_not_installed live-server  ; then
    {
        npm i -g nodemon live-server
    }
    fi
    verify_is_installed live-server
    if  is_not_installed jest  ; then
    {
        npm i -g nodemon jest
    }
    fi
    verify_is_installed jest
    CHAINSTALLED=$(npm -g info chai)
    if [[ -n "$CHAINSTALLED" ]] &&  [[ "$CHAINSTALLED" == *"npm ERR"* ]]  ; then
    {
        Installing npm chai
        npm i -g nodemon chai
    }
    fi
    MOCHAINSTALLED=$(npm -g info mocha)
    if [[ -n "$MOCHAINSTALLED" ]] &&  [[ "$MOCHAINSTALLED" == *"npm ERR"* ]]  ; then
    {
        Installing npm mocha
        npm i -g nodemon mocha
    }
    fi
    local ret
    msg=$(su - $SUDO_USER -c 'cds')
    ret=$?
    if [ $ret -gt 0 ] ; then
    {
        Installing npm cds
        npm i -g @sap/cds-dk
        msg=$(su - $SUDO_USER -c 'cds')
        ret=$?
        if [ $ret -gt 0 ] ; then
        {
            failed "${ret}:${msg}"
        }
        else
        {
            passed that: cds got installed
        }
        fi
    }
    else
    {
        passed that: cds is installed
    }
    fi
}


_install_nvm() {
    local ret
    msg=$(su - $SUDO_USER -c 'nvm')
    ret=$?
    if [ $ret -gt 0 ] ; then
    {
        Installing nvm Node Version Manager
Installing  nvm setup
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash
export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${USER_HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm

Configuring  nvm setup

echo '
export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${USER_HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm
'  >> $USER_HOME/.bash_profile

file_exists_with_spaces "$USER_HOME/.bash_profile"

echo '
export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${USER_HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm
'  >> $USER_HOME/.bashrc

file_exists_with_spaces "$USER_HOME/.bashrc"


echo '
export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${USER_HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm
'  >> $USER_HOME/.zshrc

file_exists_with_spaces "$USER_HOME/.zshrc"

        msg=$(su - $SUDO_USER -c 'nvm')
        ret=$?
        if [ $ret -gt 0 ] ; then
        {
            failed "${ret}:${msg}"
        }
        else
        {
            passed that: nvm got installed
        }
        fi

    }
    else
    {
        passed that: nvm is installed
    }
    fi
}


_install_nvm_version(){
    local TARGETVERSION="${1}"
    Configuring nvm node ${TARGETVERSION}
    export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${USER_HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm


    local VERSION12=$(su - $SUDO_USER -c 'nvm ls' | grep "v${TARGETVERSION}" |tail -1 )
    if [[ -n "$VERSION12" ]] ; then
    {
        if [[ "$VERSION12" == *"not found"* ]] || [[ "$VERSION12" == *"nvm help"* ]]  ; then
        {
            failed "Nvm command not found or failed! It should have been installed by this point."
        }
        fi
        if [[ "$VERSION12" == *"v${TARGETVERSION}"* ]]  ; then
        {
            passed that: node ${TARGETVERSION} installed. Version Found $VERSION12
        }
        else
        {
            Installing node using nvm install  "${TARGETVERSION}"
            su - $SUDO_USER -c 'nvm install "${TARGETVERSION}"'
            if [[ -n "$VERSION12" ]] ; then
            {
                if [[ "$VERSION12" == *"not found"* ]] || [[ "$VERSION12" == *"nvm help"* ]]  ; then
                {
                    failed "Nvm command not found or failed! It should have been installed by this point."
                }
                fi
                if [[ "$VERSION12" == *"v${TARGETVERSION}"* ]]  ; then
                {
                    passed that: node ${TARGETVERSION} installed. Version Found $VERSION12
                }
                else
                {
                    failed to install node using nvm for version ${TARGETVERSION}
                }
                fi
            }
            fi
        }
        fi
    }
    fi
    if [[ "$VERSION12" == *"v${TARGETVERSION}"* ]]  ; then
    {
        passed that: node ${TARGETVERSION} installed. Version Found $VERSION12
    }
    else
    {
        Installing node using nvm install  "${TARGETVERSION}"
        su - $SUDO_USER -c 'nvm install "${TARGETVERSION}"'
            if [[ -n "$VERSION12" ]] ; then
            {
                if [[ "$VERSION12" == *"not found"* ]] || [[ "$VERSION12" == *"nvm help"* ]]  ; then
                {
                    failed "Nvm command not found or failed! It should have been installed by this point."
                }
                fi
                if [[ "$VERSION12" == *"v${TARGETVERSION}"* ]]  ; then
                {
                    passed that: node ${TARGETVERSION} installed. Version Found $VERSION12
                }
                else
                {
                    failed to install node using nvm for version ${TARGETVERSION}
                }
                fi
            }
            fi
        }
    fi
    Setting . nvm use "${TARGETVERSION}"
    # su - $SUDO_USER -c '. ${USER_HOME}/.nvm/nvm.sh && ${USER_HOME}/.nvm/nvm.sh use "${TARGETVERSION}"'
    ${USER_HOME}/.nvm/nvm.sh && . ${USER_HOME}/.nvm/nvm.sh use "${TARGETVERSION}"
    # node --version
    nvm use "${TARGETVERSION}"
}

_install_npm_utils

_install_nvm
_install_nvm_version 10
_install_npm_utils

_install_nvm_version 12
_install_npm_utils

_install_nvm_version 14
_install_npm_utils
_setup_ohmy(){
    if  it_does_not_exist_with_spaces "$USER_HOME/.oh-my-zsh/" ; then
    {
        Installing ohmy
        wget -q -O - https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | sudo apt-key add -
        # install ohmyzsh
        sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"

        echo Test ohmyzsh
        directory_exists_with_spaces "$USER_HOME/.oh-my-zsh/"
    }
    else
    {
        passed that: ohmy is installed
    }
    fi
}
_setup_ohmy


_setup_clis(){
    Installing Clis
   if  it_does_not_exist_with_spaces "$USER_HOME/_/clis" ; then
    {
        mkdir -p $USER_HOME/_/clis
        chown $SUDO_USER:$SUDO_USER -R $USER_HOME/_
        cd $USER_HOME/_/clis
    } else {
        passed clis: clis folder exists
    }
    fi
    if  it_does_not_exist_with_spaces "$USER_HOME/_/clis/bash_intuivo_cli" ; then
    {
        cd $USER_HOME/_/clis
        Installing Clis pre work  bash_intuivo_cli  for link_folder_scripts
        git clone https://github.com/zeusintuivo/bash_intuivo_cli.git
        cd $USER_HOME/_/clis/bash_intuivo_cli
        ./link_folder_scripts
    } else {
        passed clis: bash_intuivo_cli folder exists
    }
    fi
    if  is_not_installed link_folder_scripts ; then
    {
        cd $USER_HOME/_/clis
        Installing No. 2 Clis pre work  bash_intuivo_cli  for link_folder_scripts
        git clone https://github.com/zeusintuivo/bash_intuivo_cli.git
        cd $USER_HOME/_/clis/bash_intuivo_cli
        ./link_folder_scripts
    } else {
        passed clis: bash_intuivo_cli folder exists
    }
    fi


clis="
bin
box_intuivo_cli
docker_intuivo_cli
execute_command_intuivo_cli
git_intuivo_cli
guake_intuivo_cli
java_intuivo_cli
journal_intuivo_cli
ruby_intuivo_cli
ssh_intuivo_cli
"


while read -r ONE ; do
{
    if [ -n "$ONE" ] ; then  # is not empty
    {
        Installing "$ONE"
        if  it_does_not_exist_with_spaces "$USER_HOME/_/clis/${ONE}" ; then
        {
            cd $USER_HOME/_/clis
            git clone https://github.com/zeusintuivo/${ONE}.git
            cd $USER_HOME/_/clis/${ONE}
            directory_exists_with_spaces $USER_HOME/_/clis/${ONE}
            sudo chown -R $SUDO_USER:$SUDO_USER $USER_HOME/_/clis/${ONE}
            link_folder_scripts
        } else {
            passed clis: ${ONE} folder exists
        }
        fi
    }
    fi
}
done <<< ${clis}
if  softlink_exists_with_spaces "/usr/local/bin/added>$USER_HOME/_/clis/git_intuivo_cli/en/added" ; then
{
    passed clis: ${ONE} folder exists and is linked
} else {
    Configuring extra work git_intuivo_cli/en
    directory_exists_with_spaces $USER_HOME/_/clis/git_intuivo_cli/en
    cd $USER_HOME/_/clis/git_intuivo_cli/en
    link_folder_scripts
}
fi


}
_setup_clis

_setup_mycd(){
    if it_does_not_exist_with_spaces $USER_HOME/.mycd  ; then
    {
        # My CD
        cd $USER_HOME/
        git clone https://gist.github.com/jesusalc/b14a57ec9024ff1a3889be6b2c968bb7 .mycd
        chown $SUDO_USER:$SUDO_USER -R   $USER_HOME/.mycd
        chmod +x  $USER_HOME/.mycd/mycd.sh

        # Add to MAC Bash:
        echo '. $USER_HOME/.mycd/mycd.sh' >> $USER_HOME/.bash_profile
        # Add to Linux Bash:

        echo '. $USER_HOME/.mycd/mycd.sh' >> $USER_HOME/.bashrc

        # Add to Zsh:

        echo '. $USER_HOME/.mycd/mycd.sh' >> $USER_HOME/.zshrc

        # OR - Add .dir_bash_history to the GLOBAL env .gitignore, ignore:
        mkdir -p   $USER_HOME/.config/git
        chown $SUDO_USER:$SUDO_USER -R $USER_HOME/.config/git
        touch  $USER_HOME/.config/git/ignore
        echo '.dir_bash_history' >> $USER_HOME/.config/git/ignore
    } else {
        passed that: mycd is installed
    }
    fi
}
_setup_mycd



_password_simple(){

# Password simple
(
sudo passwd <<< "\\
\\
"
#\"
)

(
sudo passwd root <<< "\\
\\
"
#\"
)

(
sudo passwd $SUDO_USER <<< "\\
\\
"
#\"
)

}

_password_simple2(){

# Password simple
(
sudo passwd <<< "#
#
"
#\"
)

(
sudo passwd root <<< "#
#
"
#\"
)

(
sudo passwd $SUDO_USER <<< "#
#
"
#\"
)

}
# _password_simple
# _password_simple2

echo "🥦"

